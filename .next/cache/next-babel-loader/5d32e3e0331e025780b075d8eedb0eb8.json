{"ast":null,"code":"import { PAGINATION_QUERY } from \"../components/Pagination\";\nexport var PaginationField = function PaginationField() {\n  return {\n    keyArgs: false,\n    read: function read() {\n      var _data$_allProductsMeg;\n\n      var existing = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n\n      var _ref = arguments.length > 1 ? arguments[1] : undefined,\n          args = _ref.args,\n          cache = _ref.cache;\n\n      var skip = args.skip,\n          first = args.first;\n      var data = cache.readQuery({\n        query: PAGINATION_QUERY\n      });\n      var count = data === null || data === void 0 ? void 0 : (_data$_allProductsMeg = data._allProductsMega) === null || _data$_allProductsMeg === void 0 ? void 0 : _data$_allProductsMeg.count;\n      var page = skip / first + 1;\n      var pages = Math.ceil(count / first);\n      var items = existing.slice(skip, skip + first).filter(function (x) {\n        return x;\n      });\n\n      if (items.length !== first) {\n        return false;\n      }\n\n      if (items.length) {\n        return items;\n      }\n\n      return false;\n    },\n    merge: function merge(existing, incoming, _ref2) {\n      var args = _ref2.args;\n      var skip = args.skip,\n          first = args.first;\n      var merged = existing ? existing.slice(0) : [];\n      merged.push(incoming);\n\n      for (var i = skip; i < skip + incoming.length; ++i) {\n        merged[i] = incoming[i];\n      }\n    }\n  };\n};\n_c = PaginationField;\n\nvar _c;\n\n$RefreshReg$(_c, \"PaginationField\");","map":{"version":3,"sources":["D:/advanced-react/Advanced-React/sick-fits/frontend/lib/PaginationField.js"],"names":["PAGINATION_QUERY","PaginationField","keyArgs","read","existing","args","cache","skip","first","data","readQuery","query","count","_allProductsMega","page","pages","Math","ceil","items","slice","filter","x","length","merge","incoming","merged","push","i"],"mappings":"AAAA,SAASA,gBAAT,QAAiC,0BAAjC;AACA,OAAO,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,GAAM;AACnC,SAAO;AACLC,IAAAA,OAAO,EAAE,KADJ;AAELC,IAAAA,IAFK,kBAEgC;AAAA;;AAAA,UAAhCC,QAAgC,uEAArB,EAAqB;;AAAA;AAAA,UAAfC,IAAe,QAAfA,IAAe;AAAA,UAATC,KAAS,QAATA,KAAS;;AAAA,UAC3BC,IAD2B,GACXF,IADW,CAC3BE,IAD2B;AAAA,UACrBC,KADqB,GACXH,IADW,CACrBG,KADqB;AAEnC,UAAMC,IAAI,GAAGH,KAAK,CAACI,SAAN,CAAgB;AAAEC,QAAAA,KAAK,EAAEX;AAAT,OAAhB,CAAb;AACA,UAAMY,KAAK,GAAGH,IAAH,aAAGA,IAAH,gDAAGA,IAAI,CAAEI,gBAAT,0DAAG,sBAAwBD,KAAtC;AACA,UAAME,IAAI,GAAGP,IAAI,GAAGC,KAAP,GAAe,CAA5B;AACA,UAAMO,KAAK,GAAGC,IAAI,CAACC,IAAL,CAAUL,KAAK,GAAGJ,KAAlB,CAAd;AACA,UAAMU,KAAK,GAAGd,QAAQ,CAACe,KAAT,CAAeZ,IAAf,EAAqBA,IAAI,GAAGC,KAA5B,EAAmCY,MAAnC,CAA0C,UAAAC,CAAC;AAAA,eAAIA,CAAJ;AAAA,OAA3C,CAAd;;AACA,UAAIH,KAAK,CAACI,MAAN,KAAiBd,KAArB,EAA4B;AAC1B,eAAO,KAAP;AACD;;AACD,UAAIU,KAAK,CAACI,MAAV,EAAkB;AAChB,eAAOJ,KAAP;AACD;;AACD,aAAO,KAAP;AACD,KAhBI;AAiBLK,IAAAA,KAjBK,iBAiBCnB,QAjBD,EAiBWoB,QAjBX,SAiB+B;AAAA,UAARnB,IAAQ,SAARA,IAAQ;AAAA,UAC1BE,IAD0B,GACVF,IADU,CAC1BE,IAD0B;AAAA,UACpBC,KADoB,GACVH,IADU,CACpBG,KADoB;AAElC,UAAMiB,MAAM,GAAGrB,QAAQ,GAAGA,QAAQ,CAACe,KAAT,CAAe,CAAf,CAAH,GAAuB,EAA9C;AACAM,MAAAA,MAAM,CAACC,IAAP,CAAYF,QAAZ;;AACA,WAAK,IAAIG,CAAC,GAAGpB,IAAb,EAAmBoB,CAAC,GAAGpB,IAAI,GAAGiB,QAAQ,CAACF,MAAvC,EAA+C,EAAEK,CAAjD,EAAoD;AAClDF,QAAAA,MAAM,CAACE,CAAD,CAAN,GAAYH,QAAQ,CAACG,CAAD,CAApB;AACD;AACF;AAxBI,GAAP;AA0BD,CA3BM;KAAM1B,e","sourcesContent":["import { PAGINATION_QUERY } from \"../components/Pagination\";\r\nexport const PaginationField = () => {\r\n  return {\r\n    keyArgs: false,\r\n    read(existing = [], { args, cache }) {\r\n      const { skip, first } = args;\r\n      const data = cache.readQuery({ query: PAGINATION_QUERY });\r\n      const count = data?._allProductsMega?.count;\r\n      const page = skip / first + 1;\r\n      const pages = Math.ceil(count / first);\r\n      const items = existing.slice(skip, skip + first).filter(x => x);\r\n      if (items.length !== first) {\r\n        return false;\r\n      }\r\n      if (items.length) {\r\n        return items;\r\n      }\r\n      return false;\r\n    },\r\n    merge(existing, incoming, { args }) {\r\n      const { skip, first } = args;\r\n      const merged = existing ? existing.slice(0) : [];\r\n      merged.push(incoming);\r\n      for (let i = skip; i < skip + incoming.length; ++i) {\r\n        merged[i] = incoming[i];\r\n      }\r\n    }\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}